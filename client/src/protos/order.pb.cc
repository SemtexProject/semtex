// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#include "order.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace exchange {

inline constexpr SubmitOrderResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubmitOrderResponse::SubmitOrderResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SubmitOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitOrderResponseDefaultTypeInternal() {}
  union {
    SubmitOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitOrderResponseDefaultTypeInternal _SubmitOrderResponse_default_instance_;

inline constexpr Order::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        id_{::int64_t{0}},
        quantity_{0},
        price_{0},
        side_{0},
        type_{0},
        duration_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Order::Order(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace exchange
static ::_pb::Metadata file_level_metadata_order_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_order_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_order_2eproto = nullptr;
const ::uint32_t TableStruct_order_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.side_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::exchange::Order, _impl_.timestamp_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::exchange::SubmitOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::exchange::SubmitOrderResponse, _impl_.status_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 16, -1, sizeof(::exchange::Order)},
        {24, -1, -1, sizeof(::exchange::SubmitOrderResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::exchange::_Order_default_instance_._instance,
    &::exchange::_SubmitOrderResponse_default_instance_._instance,
};
const char descriptor_table_protodef_order_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013order.proto\022\010exchange\032\037google/protobuf"
    "/timestamp.proto\"\241\001\n\005Order\022\n\n\002id\030\001 \001(\003\022\020"
    "\n\010quantity\030\002 \001(\002\022\r\n\005price\030\003 \001(\002\022\016\n\006symbo"
    "l\030\004 \001(\t\022\014\n\004side\030\005 \001(\005\022\014\n\004type\030\006 \001(\005\022\020\n\010d"
    "uration\030\007 \001(\005\022-\n\ttimestamp\030\010 \001(\0132\032.googl"
    "e.protobuf.Timestamp\"%\n\023SubmitOrderRespo"
    "nse\022\016\n\006status\030\001 \001(\t2P\n\017ExchangeService\022="
    "\n\013SubmitOrder\022\017.exchange.Order\032\035.exchang"
    "e.SubmitOrderResponseb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_order_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_order_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_order_2eproto = {
    false,
    false,
    349,
    descriptor_table_protodef_order_2eproto,
    "order.proto",
    &descriptor_table_order_2eproto_once,
    descriptor_table_order_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_order_2eproto::offsets,
    file_level_metadata_order_2eproto,
    file_level_enum_descriptors_order_2eproto,
    file_level_service_descriptors_order_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_order_2eproto_getter() {
  return &descriptor_table_order_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_order_2eproto(&descriptor_table_order_2eproto);
namespace exchange {
// ===================================================================

class Order::_Internal {
 public:
  using HasBits = decltype(std::declval<Order>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Order, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const Order* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& Order::_Internal::timestamp(const Order* msg) {
  return *msg->_impl_.timestamp_;
}
void Order::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Order::Order(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exchange.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_) {}

Order::Order(
    ::google::protobuf::Arena* arena,
    const Order& from)
    : ::google::protobuf::Message(arena) {
  Order* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, duration_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::duration_));

  // @@protoc_insertion_point(copy_constructor:exchange.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        symbol_(arena) {}

inline void Order::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, duration_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::duration_));
}
Order::~Order() {
  // @@protoc_insertion_point(destructor:exchange.Order)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Order::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.symbol_.Destroy();
  delete _impl_.timestamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.Order)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.duration_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Order::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 37, 2> Order::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Order, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Order_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp timestamp = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.timestamp_)}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Order, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.id_)}},
    // float quantity = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_)}},
    // float price = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)}},
    // string symbol = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.symbol_)}},
    // int32 side = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Order, _impl_.side_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.side_)}},
    // int32 type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Order, _impl_.type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.type_)}},
    // int32 duration = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Order, _impl_.duration_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.duration_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // float quantity = 2;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float price = 3;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.price_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string symbol = 4;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.symbol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 side = 5;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.side_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 type = 6;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 duration = 7;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.duration_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp timestamp = 8;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\16\0\0\0\6\0\0\0\0\0\0\0\0\0\0\0"
    "exchange.Order"
    "symbol"
  }},
};

::uint8_t* Order::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.Order)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // float quantity = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_quantity = this->_internal_quantity();
  ::uint32_t raw_quantity;
  memcpy(&raw_quantity, &tmp_quantity, sizeof(tmp_quantity));
  if (raw_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_quantity(), target);
  }

  // float price = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  ::uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_price(), target);
  }

  // string symbol = 4;
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "exchange.Order.symbol");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 side = 5;
  if (this->_internal_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_side(), target);
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_type(), target);
  }

  // int32 duration = 7;
  if (this->_internal_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_duration(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.Order)
  return target;
}

::size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.Order)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 4;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // .google.protobuf.Timestamp timestamp = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // float quantity = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_quantity = this->_internal_quantity();
  ::uint32_t raw_quantity;
  memcpy(&raw_quantity, &tmp_quantity, sizeof(tmp_quantity));
  if (raw_quantity != 0) {
    total_size += 5;
  }

  // float price = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  ::uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 5;
  }

  // int32 side = 5;
  if (this->_internal_side() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_side());
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  // int32 duration = 7;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Order::_class_data_ = {
    Order::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Order::GetClassData() const {
  return &_class_data_;
}

void Order::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exchange.Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_quantity = from._internal_quantity();
  ::uint32_t raw_quantity;
  memcpy(&raw_quantity, &tmp_quantity, sizeof(tmp_quantity));
  if (raw_quantity != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_price = from._internal_price();
  ::uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Order::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Order::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Order::InternalSwap(Order* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.duration_)
      + sizeof(Order::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_order_2eproto_getter, &descriptor_table_order_2eproto_once,
      file_level_metadata_order_2eproto[0]);
}
// ===================================================================

class SubmitOrderResponse::_Internal {
 public:
};

SubmitOrderResponse::SubmitOrderResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:exchange.SubmitOrderResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubmitOrderResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : status_(arena, from.status_),
        _cached_size_{0} {}

SubmitOrderResponse::SubmitOrderResponse(
    ::google::protobuf::Arena* arena,
    const SubmitOrderResponse& from)
    : ::google::protobuf::Message(arena) {
  SubmitOrderResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:exchange.SubmitOrderResponse)
}
inline PROTOBUF_NDEBUG_INLINE SubmitOrderResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : status_(arena),
        _cached_size_{0} {}

inline void SubmitOrderResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubmitOrderResponse::~SubmitOrderResponse() {
  // @@protoc_insertion_point(destructor:exchange.SubmitOrderResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubmitOrderResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.status_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SubmitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:exchange.SubmitOrderResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubmitOrderResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 43, 2> SubmitOrderResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SubmitOrderResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string status = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SubmitOrderResponse, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string status = 1;
    {PROTOBUF_FIELD_OFFSET(SubmitOrderResponse, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\6\0\0\0\0\0\0"
    "exchange.SubmitOrderResponse"
    "status"
  }},
};

::uint8_t* SubmitOrderResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:exchange.SubmitOrderResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "exchange.SubmitOrderResponse.status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:exchange.SubmitOrderResponse)
  return target;
}

::size_t SubmitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:exchange.SubmitOrderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubmitOrderResponse::_class_data_ = {
    SubmitOrderResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SubmitOrderResponse::GetClassData() const {
  return &_class_data_;
}

void SubmitOrderResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubmitOrderResponse*>(&to_msg);
  auto& from = static_cast<const SubmitOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:exchange.SubmitOrderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitOrderResponse::CopyFrom(const SubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:exchange.SubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubmitOrderResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SubmitOrderResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SubmitOrderResponse::InternalSwap(SubmitOrderResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
}

::google::protobuf::Metadata SubmitOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_order_2eproto_getter, &descriptor_table_order_2eproto_once,
      file_level_metadata_order_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace exchange
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
